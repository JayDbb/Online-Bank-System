//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Online_Bank_System.myWebServiceRef {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MyWebServiceSoap", Namespace="http://tempuri.org/")]
    public partial class MyWebService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback DoesAccountExistOperationCompleted;
        
        private System.Threading.SendOrPostCallback TopUpOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitPaymentOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MyWebService() {
            this.Url = global::Online_Bank_System.Properties.Settings.Default.Online_Bank_System_myWebServiceRef_MyWebService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event DoesAccountExistCompletedEventHandler DoesAccountExistCompleted;
        
        /// <remarks/>
        public event TopUpCompletedEventHandler TopUpCompleted;
        
        /// <remarks/>
        public event AddAccountCompletedEventHandler AddAccountCompleted;
        
        /// <remarks/>
        public event SubmitPaymentCompletedEventHandler SubmitPaymentCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DoesAccountExist", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DoesAccountExist(int AccountID) {
            object[] results = this.Invoke("DoesAccountExist", new object[] {
                        AccountID});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DoesAccountExistAsync(int AccountID) {
            this.DoesAccountExistAsync(AccountID, null);
        }
        
        /// <remarks/>
        public void DoesAccountExistAsync(int AccountID, object userState) {
            if ((this.DoesAccountExistOperationCompleted == null)) {
                this.DoesAccountExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoesAccountExistOperationCompleted);
            }
            this.InvokeAsync("DoesAccountExist", new object[] {
                        AccountID}, this.DoesAccountExistOperationCompleted, userState);
        }
        
        private void OnDoesAccountExistOperationCompleted(object arg) {
            if ((this.DoesAccountExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoesAccountExistCompleted(this, new DoesAccountExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TopUp", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool TopUp(int recipientAccountId, int OwnerAccountID, decimal topUpAmount) {
            object[] results = this.Invoke("TopUp", new object[] {
                        recipientAccountId,
                        OwnerAccountID,
                        topUpAmount});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TopUpAsync(int recipientAccountId, int OwnerAccountID, decimal topUpAmount) {
            this.TopUpAsync(recipientAccountId, OwnerAccountID, topUpAmount, null);
        }
        
        /// <remarks/>
        public void TopUpAsync(int recipientAccountId, int OwnerAccountID, decimal topUpAmount, object userState) {
            if ((this.TopUpOperationCompleted == null)) {
                this.TopUpOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTopUpOperationCompleted);
            }
            this.InvokeAsync("TopUp", new object[] {
                        recipientAccountId,
                        OwnerAccountID,
                        topUpAmount}, this.TopUpOperationCompleted, userState);
        }
        
        private void OnTopUpOperationCompleted(object arg) {
            if ((this.TopUpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TopUpCompleted(this, new TopUpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddAccount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddAccount(int AccountID, string Password) {
            object[] results = this.Invoke("AddAccount", new object[] {
                        AccountID,
                        Password});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddAccountAsync(int AccountID, string Password) {
            this.AddAccountAsync(AccountID, Password, null);
        }
        
        /// <remarks/>
        public void AddAccountAsync(int AccountID, string Password, object userState) {
            if ((this.AddAccountOperationCompleted == null)) {
                this.AddAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAccountOperationCompleted);
            }
            this.InvokeAsync("AddAccount", new object[] {
                        AccountID,
                        Password}, this.AddAccountOperationCompleted, userState);
        }
        
        private void OnAddAccountOperationCompleted(object arg) {
            if ((this.AddAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAccountCompleted(this, new AddAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SubmitPayment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SubmitPayment(int senderAccountID, int receiverAccountID, decimal amount, string senderPassword) {
            object[] results = this.Invoke("SubmitPayment", new object[] {
                        senderAccountID,
                        receiverAccountID,
                        amount,
                        senderPassword});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitPaymentAsync(int senderAccountID, int receiverAccountID, decimal amount, string senderPassword) {
            this.SubmitPaymentAsync(senderAccountID, receiverAccountID, amount, senderPassword, null);
        }
        
        /// <remarks/>
        public void SubmitPaymentAsync(int senderAccountID, int receiverAccountID, decimal amount, string senderPassword, object userState) {
            if ((this.SubmitPaymentOperationCompleted == null)) {
                this.SubmitPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitPaymentOperationCompleted);
            }
            this.InvokeAsync("SubmitPayment", new object[] {
                        senderAccountID,
                        receiverAccountID,
                        amount,
                        senderPassword}, this.SubmitPaymentOperationCompleted, userState);
        }
        
        private void OnSubmitPaymentOperationCompleted(object arg) {
            if ((this.SubmitPaymentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitPaymentCompleted(this, new SubmitPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void DoesAccountExistCompletedEventHandler(object sender, DoesAccountExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoesAccountExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoesAccountExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void TopUpCompletedEventHandler(object sender, TopUpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TopUpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TopUpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void AddAccountCompletedEventHandler(object sender, AddAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    public delegate void SubmitPaymentCompletedEventHandler(object sender, SubmitPaymentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.9032.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitPaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitPaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591